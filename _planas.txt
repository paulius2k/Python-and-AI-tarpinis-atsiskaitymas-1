classes
    item.py
        class Item():
            """Any item for loan that the library owns (a book, a magazine or other)"""

            def __str__()

            def _repr__()

    book.py
        class Book(Item):
            """A book item"""

    catalogue.py    -- NEEDS STORAGE --
        class Catalogue():
            """A catalogue of all items the library owns."""

            def _dump_data_from_storage(file_name):
                """Load any type of data from the storage file"""

            def add_book():
                """Add new item to the catalogue"""

            def get_items()
                """Returns a list of items from the catalogue depending of request criteria"""

            def delete_item()

    transaction.py
        class Transaction(Item):
            """A transaction between the library and the client-reader (e.g. lending, returning am item)"""

            def __init__()

            def __str__()

            def __repr__()

    registry.py     -- NEEDS STORAGE --
        class Registry(Transaction):
            """A registry of transactions between the library and the readers"""

            def new_transaction()

            def get_transactions()

    person.py
        class Person():
            """A person, who can become a reader or a librarian"""

    reader.py
        class Reader(Person):
            """A registered reader who can borrow books from the library"""

    librarian.py    -- BONUS --
        class Librarian(Person):
            """A library employee who services readers"""

    clientCard.py   -- BONUS --
        class ClientCard():
            """A card issued to a reader which allows access to the services of the library"""

    clients.py      -- NEEDS STORAGE --
        class Clients():
            """A list of all library readers"""

            def add_client()

            def get_clients()

            def deactivate_client()

    employees.py    -- NEEDS STORAGE --
        class Employees():
            """A list of all librarians (maybe other employees of the library)"""


modules
    register.py
        def register_reader():

        def register_librarian():  -- BONUS --

    item_actions.py
        def delete_item():
            """Remove / delete item from the catalogue"""

        def list_items():
            """List all items in the catalogue"""

    transactions.py
        def lend_item():
            """Lend out an item to the reader"""

        def return_item():
            """Receive an item back from the reader"""

    services.py


views
    menus.py
        def show_main_menu():
            """

            LIBRARIAN MENU STRUCTURE:
            ----------------------

            • LIBRARY CATALOGUE (incl. LEND ITEM)
                - SEARCH FOR ITEM
                    -- {SELECTED ITEM} ACTIONS MENU
                        --- LEND ITEM (workflow: --> search for reader --> new LEND transaction)
                        --- DELETE ITEM (yes/no)
                - LIST ALL ITEMS
                    -- {SELECTED ITEM} ACTIONS MENU
                        --- LEND ITEM (workflow: --> search for reader --> new LEND transaction)
                        --- DELETE ITEM (yes/no)
                - LIST OVERDUE ITEMS
                    -- {SELECTED TRANSACTION} ACTIONS MENU
                        --- RETURN ITEM
                --------------------------------------------
                - ADD NEW BOOK
                - DELETE BOOK
                    -- SEARCH ITEM
                        --- {SELECTED ITEM} ACTIONS MENU
                            ---- LEND ITEM (workflow: --> search for reader --> new LEND transaction)
                            ---- DELETE ITEM (yes/no)
                --------------------------------------------
                - LIST DELETED ITEMS
                - CATALOGUE STATISTICS

            • CLIENTS (incl. RETURN ITEM)
                - SEARCH FOR A READER
                    -- {READER} ACTIONS MENU
                        --- LIST BORROWED BOOKS
                            ---- {SELECTED TRANSACTION} ACTIONS MENU
                                ----- RETURN ITEM
                        --- LIST CLOSED TRANSACTIONS
                        --- DEACTIVATE READER (yes/no)
                - REGISTER NEW READER



        def {other_menus}:
            """

    lists.py
        def list_catalogue_dynamic():

        def list_transactions_dynamic():


.gitignore
constants.py
main.py